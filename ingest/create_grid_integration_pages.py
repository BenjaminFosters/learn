import ingest as ingest_func
from pathlib import Path
import re

import os

integrations_dict = ["data-collection"]



def get_dir_make_file_and_recurse(directory):

    path, name = str(directory).rsplit("/",1)
    filename = f"{path}/{name}/{name}.mdx"
    
    

    # Do stuff for all the files inside the dict
    if len(sorted(Path(directory).glob("**/**/*"))) > 1:
        # print(directory)
        md = \
f"""---
sidebar_label: "{str(directory).rsplit("/",1)[1]}"
learn_status: "AUTOGENERATED"
slug: "{ingest_func.clean_and_lower_string(str(directory)).split('docs',1)[1]}"
learn_link: "https://learn.netdata.cloud/{ingest_func.clean_and_lower_string(str(directory))}"
---

import \u007b Grid, Box \u007d from '@site/src/components/Grid_integrations';

<Grid  columns="4">
"""




        # TODO CHANGE
        sorted_list = sorted(Path(directory).glob("**/**/*"))



        for file in sorted_list:
            if Path(file).is_file():
                whole_file = Path(file).read_text()
                if "DO NOT EDIT THIS FILE DIRECTLY" in whole_file:
                    meta_dict = ingest_func.read_metadata(whole_file)
                            
                    color = "red"
                    img = re.search(r'<img src="https:\/\/netdata.cloud\/img.*', whole_file)[0].replace("width=\"150\"", "width=\"77\"")

                    md += \
    f"""
<Box className="{color}" to="/docs{meta_dict["slug"]}"  title="{meta_dict["sidebar_label"]}">
    {img}
</Box>
"""

        md+= "\n</Grid>"
        Path(filename.rsplit("/",1)[0]).mkdir(parents=True, exist_ok=True)
        Path(filename).write_text(md)


        for subdir in sorted(Path(directory).glob("*/")):
            get_dir_make_file_and_recurse(subdir)



get_dir_make_file_and_recurse("docs/data-collection/Linux Systems")
get_dir_make_file_and_recurse("docs/data-collection/APM")

def recursive(directory):
    for element in sorted(Path(f"{directory}").glob('**/*/')):
        #each file
        print(str(element),  len(sorted(Path(element).glob("**/**/*"))),  sorted(Path(element).glob("**/**/*")), "\n") 
        path, name = str(element).rsplit("/",1)
        filename = f"{path}/{name}/{name}.mdx"
        
        

        # continue
        if len(sorted(Path(element).glob("**/**/*"))) > 1:
            print(element)
            md = \
f"""---
sidebar_label: "{str(element).rsplit("/",1)[1]}"
learn_status: "AUTOGENERATED"
slug: "{ingest_func.clean_and_lower_string(str(element)).split('docs',1)[1]}"
learn_link: "https://learn.netdata.cloud/{ingest_func.clean_and_lower_string(str(element))}"
---

import \u007b Grid, Box \u007d from '@site/src/components/Grid_integrations';

<Grid  columns="4">
"""
            community_files = []
            for file in sorted(Path(element).glob("**/**/*")):
                if Path(file).is_file():
                    whole_file = Path(file).read_text()
                    if "DO NOT EDIT THIS FILE DIRECTLY" in whole_file:
                        meta_dict = ingest_func.read_metadata(whole_file)
                        
                        if "maintained%20by-Netdata-%2300ab44" in whole_file:
                            img = re.search(r'<img src="https:\/\/netdata.cloud\/img.*', whole_file)[0]

                            md += \
f"""
<Box className="#00ab44" to="/docs{meta_dict["slug"]}"  title="{meta_dict["sidebar_label"]}">
    {img}
</Box>
"""
                        else:
                            community_files.append(file)
            
            for file in community_files:
                whole_file = Path(file).read_text()
                meta_dict = ingest_func.read_metadata(whole_file)
                
                img = re.search(r'<img src="https:\/\/netdata.cloud\/img.*', whole_file)[0]

                md += \
f"""
<Box className="" to="/docs{meta_dict["slug"]}"  title="{meta_dict["sidebar_label"]}">
    {img}
</Box>
"""

            md+= "\n</Grid>"
            Path(filename.rsplit("/",1)[0]).mkdir(parents=True, exist_ok=True)
            Path(filename).write_text(md)
            # quit()

# for directory in integrations_dict:
#     # iterate the dirs inside
#     # recursive(f"docs/{directory}")
#     recursive(f"docs/data-collection")

